using System;

namespace SenseNet.TaskManagement.Core
{
    /// <summary>
    /// Task registration result (e.g. whether this is a new task or an existing one).
    /// </summary>
    public class RegisterTaskResult
    {
        public static readonly string ErrorTaskRegistrationFailed = "TaskRegistrationFailed";

        /// <summary>
        /// The task that was created or updated.
        /// </summary>
        public SnTask Task { get; set; }
        /// <summary>
        /// True if the task was newly created by this register request.
        /// </summary>
        public bool NewlyCreated { get; set; }
        /// <summary>
        /// True if the task existed before and was only updated by this register request.
        /// </summary>
        public bool Updated { get; set; }
        public string Error { get; set; }
    }

    /// <summary>
    /// This is the main entity in the Task Management component. Represents a unit of work that is registered
    /// by client applications with the central Task Management web application. Agents will lock these tasks
    /// for themselves and will execute the appropriate task executor passing this object to them.
    /// </summary>
    public class SnTask
    {
        /// <summary>
        /// Task identifier.
        /// </summary>
        public int Id { get; set; }
        /// <summary>
        /// Task type. Identifies the executor command line tool (without the '.exe' extension) that will be started by the agent.
        /// </summary>
        public string Type { get; set; }
        /// <summary>
        /// Task title.
        /// </summary>
        public string Title { get; set; }
        /// <summary>
        /// Task priority. Must be one of the predefined TaskPriority enum values: 0, 1, 10, 100, 1000.
        /// </summary>
        public double Order { get; set; }
        /// <summary>
        /// Optional tag that classifies the task in the client application (e.g. the workspace where the task was generated in).
        /// </summary>
        public string Tag { get; set; }
        /// <summary>
        /// Task registration UTC time.
        /// </summary>
        public DateTime RegisteredAt { get; set; }
        /// <summary>
        /// Client application that registered the task.
        /// </summary>
        public string AppId { get; set; }
        /// <summary>
        /// When the executing agent updated the lock on the task.
        /// </summary>
        public DateTime? LastLockUpdate { get; set; }
        /// <summary>
        /// The agent that locked this task.
        /// </summary>
        public string LockedBy { get; set; }
        /// <summary>
        /// Optional task key.
        /// </summary>
        public string TaskKey { get; set; }
        /// <summary>
        /// Hash that represents this task. Can be provided by the client application, 
        /// but usually it is generated by the Task Management component.
        /// </summary>
        public long Hash { get; set; }
        /// <summary>
        /// String representation of the information necessary for the task executor tool to run. 
        /// Usually a JSON object containing properties - e.g. content id or any other custom
        /// value. This data is not parsed by the Task Management component, it is only passed
        /// over to the executor without changes.
        /// </summary>
        public string TaskData { get; set; }
        /// <summary>
        /// Custom callback url for this task type.
        /// </summary>
        public string FinalizeUrl { get; set; }
    }
}
